#!/usr/bin/env coffee
#
# vim:ft=coffee ts=2 sw=2 et :
# -*- mode:coffee -*-

App        = require 'commander'
Hubot      = require '..'
Fs         = require 'fs'
Path       = require 'path'
HTTP       = require 'http'
Creator    = require '../src/creator'

contents = Fs.readFileSync __dirname + '/../package.json', 'utf8'
App.version (JSON.parse contents).version

App
  .command('new [path]')
  .description('Create a new deployable hubot')
  .action (path) ->
    creator = new Creator.Creator(path)
    creator.run()

App
  .command('start [name]')
  .description('Start a hubot instance')

  .option('-a, --adapter [adapter]', 'adapter hubot will use')
  .option('-d, --no-http', 'disable the built in HTTP server')
  .option('-l, --alias [alias]', 'enable replacing the robot name with an alias')

  .action (name, options) ->
    name or= 'hubot'

    adapter = options.adapter or 'shell'
    http    = !!options.http

    console.log "HTTP: #{http}"
    alias   = options.alias   or '/'

    adapterPath = Path.resolve __dirname, '..', 'src', 'adapters'

    robot = Hubot.loadBot adapterPath, adapter, http, name

    robot.enableSlash = !!alias
    robot.alias       = alias

    robot.adapter.on 'connected', ->
      scriptsPath = Path.resolve '.', 'scripts'
      robot.load scriptsPath

      scriptsPath = Path.resolve 'src', 'scripts'
      robot.load scriptsPath

      scriptsFile = Path.resolve 'hubot-scripts.json'
      Path.exists scriptsFile, (exists) =>
        if exists
          Fs.readFile scriptsFile, (err, data) ->
            scripts = JSON.parse data
            scriptsPath = Path.resolve 'node_modules', 'hubot-scripts', 'src', 'scripts'
            robot.loadHubotScripts scriptsPath, scripts

    robot.run()

App.parse process.argv

if process.argv.length is 2
  console.log App.helpInformation()
  process.exit 0

unless process.platform is 'win32'
  process.on 'SIGTERM', ->
    process.exit 0
