#!/usr/bin/env coffee
##
# hubot [options]
#
# Launch an interactive hubot
#

Hubot      = require '..'
Fs         = require 'fs'
Path       = require 'path'
HTTP       = require 'http'
Creator    = require '../src/creator'
OptParse   = require 'optparse'
PortNumber = parseInt(process.env.PORT) || 8080

Adapters = ["irc", "campfire", "hipchat", "twilio", "xmpp", "groupme", "talker", "twitter", "flowdock", "gtalk", "cli"]

Switches = [
  [ "-h", "--help",              "Display the help information"],
  [ "-a", "--adapter ADAPTER",   "The Adapter to use"],
  [ "-c", "--create PATH",       "Create a deployable hubot"],
  [ "-s", "--enable-slash",      "Enable replacing the robot's name with '/'"],
  [ "-n", "--name NAME",         "The name of the robot in chat" ],
  [ "-q", "--quiet",             "Silence verbosity on STDOUT" ],
  [ "-v", "--version",           "Displays the version of hubot installed"]
]

Options =
  path: "."
  name: "Hubot"
  create: false
  adapter: "stdio"
  verbose: true

Parser = new OptParse.OptionParser(Switches)
Parser.banner = "Usage hubot [options]"

Parser.on "adapter", (opt, value) ->
  Options.adapter = value

Parser.on "name", (opt, value) ->
  Options.name = value

Parser.on "create", (opt, value) ->
  Options.path = value
  Options.create = true

Parser.on "enable-slash", (opt) ->
  Options.enableSlash = true

Parser.on "help", (opt, value) ->
  console.log Parser.toString()
  process.exit 0

Parser.on "quiet", (opt) ->
  Options.verbose = false

Parser.on "version", (opt, value) ->
  Options.version = true

argv = process.argv.slice 2
# don't process arguments after "--"
if (idx = argv.indexOf '--') >= 0
  extra = argv.slice idx + 1
  argv = argv.slice 0, idx

Args = Parser.parse argv
Args.push extra... if extra

process.on 'SIGTERM', -> process.exit(0)

debug = (msg) ->
  console.log msg if Options.verbose

if Options.create
  creator = new Creator.Creator(Options.path)
  creator.run()

else if Options.version
  package_path = __dirname + "/../package.json"

  Fs.readFile package_path, (err,data) ->
    if err
      console.error "Could not open package file : %s", err
      process.exit 1

    content = JSON.parse(data.toString('ascii'))
    console.log content['version']

    process.exit 0

else
  adapter = if Options.adapter in Adapters
    Options.adapter
  else
    'shell'

  robot = Hubot.loadBot adapter,
    name:        Options.name
    enableSlash: Options.enableSlash
    debugStream: if Options.verbose then process.stdout else null
    errStream:   process.stderr

  expectedLoads = 3
  callback = ->
    if --expectedLoads is 0
      # run hubot after scripts have finished loading
      robot.run Args

  loadScripts = (name, path, cb) ->
    scriptsPath = Path.resolve path...
    debug "Loading #{name} at #{scriptsPath}"
    robot.load scriptsPath, cb

  loadScripts "deploy-local scripts", [ "./scripts" ], callback
  loadScripts "hubot core scripts",   [ "src", "hubot", "scripts" ], callback

  scriptsFile = Path.resolve "hubot-scripts.json"
  Path.exists scriptsFile, (exists) =>
    if exists
      debug "Loading hubot-scripts listed in #{scriptsFile}"
      Fs.readFile scriptsFile, (err, data) ->
        throw err if err
        scriptsPath = Path.resolve("node_modules", "hubot-scripts", "src", "scripts")
        plugins = JSON.parse(data)
        plugins.forEach (plugin, idx) -> robot.loadFile scriptsPath, plugin, ->
          callback?() if idx is plugins.length - 1
    else
      loadScripts "hubot-scripts plugins", [ "src", "scripts" ], callback

# vim:ft=coffee ts=2 sw=2 et :
